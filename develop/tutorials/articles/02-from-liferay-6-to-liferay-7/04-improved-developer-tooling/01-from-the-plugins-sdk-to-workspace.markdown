# From the Plugins SDK to Liferay Workspace [](id=from-the-plugins-sdk-to-liferay-workspace)

The Liferay Plugins SDK is deprecated for @product-ver@. You can continue
developing on it, but should plan to move to a new environment.
[Liferay Workspace](/develop/tutorials/-/knowledge_base/7-1/liferay-workspace)
succeeds the Plugins SDK as Liferay's opinionated development environment. You
should use it if you're not using an alternative build system like Gradle or
Maven.

Here are Workspace's key features:

- [Module and component templates](/develop/tutorials/-/knowledge_base/7-1/creating-projects-with-blade-cli#project-templates)
- [Sample projects](/develop/tutorials/-/knowledge_base/7-1/liferay-sample-projects)
- Portal server configurations
- [Project validation]()
- [Integration testing]()
- Folder structure flexibility
- [Commands](/develop/tutorials/-/knowledge_base/7-1/blade-cli) to migrate
  plugins, install @product@ bundles, and start/stop Portal instances

<!-- TODO: Add links above, when available. -Cody -->

The
[plugin upgrade](/develop/tutorials/-/knowledge_base/7-1/upgrading-plugins-to-liferay-7)
tutorials later in this series show how 
[Liferay @ide@](/develop/tutorials/-/knowledge_base/7-1/liferay-ide)
automatically adapts existing plugins to @product-ver@. There's also a tutorial
that demonstrates how you can optionally
[migrate traditional plugins to Workspace](/develop/tutorials/-/knowledge_base/7-1/migrating-traditional-plugins-to-workspace-web-applications).

![Figure 1: Liferay @ide@'s Code Upgrade Tool automates many aspects of the plugin upgrade process.](../../../images/improved-tooling-code-upgrade-configure-proj.png)

Here's an example Workspace folder structure:

![Figure 2: Liferay Workspace aggregates projects to use the same server configurations and Gradle build environment.](../../../images/improved-tooling-workspace-structure.png)

Here's the Workspace anatomy:

- `bundles/` (generated) &rarr; default folder for @product@ bundles
- `configs/` &rarr; holds Portal server configurations
- `gradle/` &rarr; holds the Gradle wrapper files
- `modules/` &rarr; holds module projects
- `plugins-sdk/` (generated) &rarr; holds plugins from previous releases
- `themes/` &rarr; holds Node.js-based theme projects
- `wars/` &rarr; holds traditional web application projects
- `build.gradle` &rarr; common Gradle build file
- `gradle-local.properties` &rarr; sets user-specific properties for your
  workspace
- `gradle.properties` &rarr; specifies the Portal server configuration and
  project locations
- `gradlew / gradlew.bat` &rarr; executes the Gradle command wrapper
- `pom.xml` (only in Workspaces generated by Maven) &rarr; common Maven build
  file
- `settings.gradle` &rarr; applies plugins to the Workspace and configures its
  dependencies

Workspace module, theme, and WAR projects use the same Portal server
configurations. Developers can create configurations for module development,
user acceptance testing, production, and more.

Each subfolder under `configs` holds a Portal server configuration defined by
its `portal-ext.properties` file. The Gradle property
`liferay.workspace.environment` in Workspace's `gradle.properties` file
specifies the configuration to use. See the
[Testing Projects](/develop/tutorials/-/knowledge_base/7-1/development-lifecycle-for-a-liferay-workspace#testing-projects)
section for more details.

Other Gradle properties set root locations for the @product@ bundle,
modules, themes, and a Plugins SDK. See the
[Gradle Workspace Properties](/develop/tutorials/-/knowledge_base/7-1/configuring-a-liferay-workspace#gradle-workspace-properties)
section for a list of all available Workspace properties.

### Workspace Folder Structure Properties [](id=workspace-folder-structure-properties)

 Property | Description |
:--------- | :------------- |
`liferay.workspace.environment` | Name of a `configs` subfolder holding the Portal server configuration to use |
`liferay.workspace.home.dir` | @product@ bundle root folder |
`liferay.workspace.modules.dir` | Module projects root folder |
`liferay.workspace.plugins.sdk.dir` | Plugins SDK root folder |
`liferay.workspace.themes.dir` | Theme projects root folder |
`liferay.workspace.wars.dir` | WAR-style projects root folder |

Workspace has Gradle tasks equivalent to the Plugins SDK Ant targets.

### Plugins SDK to Workspace Task Map [](id=plugins-sdk-to-workspace-task-map)

 Plugins SDK Ant Target | Workspace Gradle Task | Task Description |
:--------------------------- | :-------------------------- | :---------------- |
`build-css` | `buildCSS` | Builds CSS files |
`build-lang` | `buildLang` | Translates language keys using Language Builder |
`build-service` | `buildService` | Runs Service Builder |
`clean` | `clean` | Deletes all build outputs |
`compile` | `classes` | Compiles classes |
`deploy` | `deploy` (or `blade deploy`) | Installs the current project to @product@'s OSGi framework |
`jar` | `jar` | Compiles the project and packages it as a JAR file |
`war` | `assemble` | Assembles project output |

Other Workspace Gradle tasks provide additional functionality.

Workspace Gradle Task | Task Description |
:-------------------------- | :------------------ |
`buildDB` | Builds database SQL scripts from the generic SQL scripts |
`buildSoy` | Compiles Closure Templates in JavaScript functions |
`components` | Lists the project's components |
`configJSModules` | Generates the config file needed to load AMD files via combo loader in @product@
`dependencies` | Lists the project's declared dependencies |
`formatSource` | Runs Liferay Source Formatter to format project files
`initBundle` | Downloads and installs a @product@ bundle |
`model` | Lists the project's configuration model |
`projects` | Lists the project's sub-projects |
`properties` | Lists the project's
`replaceSoyTranslation` | Replaces `goog.getMsg` definitions
`transpileJS` | Transpiles the project's JavaScript files |

This is just a subset of available Gradle commands in a Liferay Workspace. Run
`gradlew tasks` from a project in workspace for a full list of Gradle commands.

<!-- TODO: Mention Workspace Test Integration section here for info on test
commands once article is available. -Cody -->
